"""
VN-Law-Mini - RAG Service with Real HuggingFace API
Kh√¥ng c√≥ mock mode - k·∫øt n·ªëi th·∫≠t v·ªõi AI model
"""

import os
import requests
from flask import Flask, request, jsonify
from flask_cors import CORS
from dotenv import load_dotenv

load_dotenv()

app = Flask(__name__)
CORS(app)

# Configuration
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
GEMINI_MODEL = os.getenv('GEMINI_MODEL', 'gemini-2.0-flash-exp')
MODEL_NAME = GEMINI_MODEL
SUPABASE_URL = os.getenv('SUPABASE_URL')
SUPABASE_ANON_KEY = os.getenv('SUPABASE_ANON_KEY')


print("="*60)
print("üöÄ VN-Law-Mini RAG Service - GOOGLE GEMINI")
print("="*60)
print(f"Gemini API Key: {'‚úÖ OK' if GEMINI_API_KEY else '‚ùå Missing'}")
print(f"Supabase: {'‚úÖ OK' if SUPABASE_URL else '‚ùå Missing'}")
print(f"Model: {MODEL_NAME}")
print("="*60)


def search_documents(query, limit=3):
    """
    T√¨m ki·∫øm vƒÉn b·∫£n trong Supabase v·ªõi nhi·ªÅu chi·∫øn l∆∞·ª£c
    ƒê·∫£m b·∫£o lu√¥n tr·∫£ v·ªÅ √≠t nh·∫•t 3 k·∫øt qu·∫£
    """
    try:
        print(f"\nüîç Searching for: {query}")
        
        headers = {
            'apikey': SUPABASE_ANON_KEY,
            'Authorization': f'Bearer {SUPABASE_ANON_KEY}',
            'Content-Type': 'application/json'
        }
        
        url = f"{SUPABASE_URL}/rest/v1/articles"
        
        # T√°ch query th√†nh c√°c t·ª´ kh√≥a
        keywords = query.split()
        results = []
        seen_ids = set()
        
        # Chi·∫øn l∆∞·ª£c 1: T√¨m ki·∫øm ch√≠nh x√°c to√†n b·ªô c√¢u
        print("üîç Strategy 1: Exact phrase search")
        params = {
            'or': f'(noi_dung.ilike.%{query}%,ten.ilike.%{query}%)',
            'limit': limit,
            'select': 'mapc,ten,noi_dung,document_id'
        }
        
        response = requests.get(url, headers=headers, params=params, timeout=10)
        if response.status_code == 200:
            for item in response.json():
                item_id = item.get('mapc')
                if item_id and item_id not in seen_ids:
                    results.append(item)
                    seen_ids.add(item_id)
                    print(f"  ‚úÖ Found: {item.get('ten', 'N/A')[:60]}...")
        
        # N·∫øu ƒë·ªß 3 k·∫øt qu·∫£ th√¨ return lu√¥n
        if len(results) >= limit:
            print(f"‚úÖ Found {len(results)} articles (Strategy 1)")
            return results[:limit]
        
        # Chi·∫øn l∆∞·ª£c 2: T√¨m ki·∫øm t·ª´ng t·ª´ kh√≥a ri√™ng l·∫ª
        print(f"üîç Strategy 2: Individual keyword search ({len(keywords)} keywords)")
        for keyword in keywords:
            if len(keyword) < 2:  # B·ªè qua t·ª´ qu√° ng·∫Øn
                continue
            
            params = {
                'or': f'(noi_dung.ilike.%{keyword}%,ten.ilike.%{keyword}%)',
                'limit': limit * 2,  # L·∫•y nhi·ªÅu h∆°n ƒë·ªÉ l·ªçc
                'select': 'mapc,ten,noi_dung,document_id'
            }
            
            response = requests.get(url, headers=headers, params=params, timeout=10)
            if response.status_code == 200:
                for item in response.json():
                    item_id = item.get('mapc')
                    if item_id and item_id not in seen_ids:
                        results.append(item)
                        seen_ids.add(item_id)
                        print(f"  ‚úÖ Found (keyword '{keyword}'): {item.get('ten', 'N/A')[:60]}...")
                        
                        if len(results) >= limit:
                            break
            
            if len(results) >= limit:
                break
        
        # N·∫øu v·∫´n ch∆∞a ƒë·ªß 3 k·∫øt qu·∫£
        if len(results) < limit:
            print(f"üîç Strategy 3: Get random recent articles")
            params = {
                'limit': limit * 3,
                'select': 'mapc,ten,noi_dung,document_id',
                'order': 'mapc.desc'
            }
            
            response = requests.get(url, headers=headers, params=params, timeout=10)
            if response.status_code == 200:
                for item in response.json():
                    item_id = item.get('mapc')
                    if item_id and item_id not in seen_ids:
                        results.append(item)
                        seen_ids.add(item_id)
                        print(f"  ‚úÖ Found (fallback): {item.get('ten', 'N/A')[:60]}...")
                        
                        if len(results) >= limit:
                            break
        
        print(f"‚úÖ Total found: {len(results)} articles")
        return results[:limit] if len(results) >= limit else results
        
    except Exception as e:
        print(f"‚ùå Search error: {e}")
        import traceback
        traceback.print_exc()
        
        # Fallback cu·ªëi c√πng: L·∫•y b·∫•t k·ª≥ 3 b√†i vi·∫øt n√†o
        try:
            print("üîç Emergency fallback: Get any 3 articles")
            headers = {
                'apikey': SUPABASE_ANON_KEY,
                'Authorization': f'Bearer {SUPABASE_ANON_KEY}',
                'Content-Type': 'application/json'
            }
            url = f"{SUPABASE_URL}/rest/v1/articles"
            params = {
                'limit': limit,
                'select': 'mapc,ten,noi_dung,document_id'
            }
            response = requests.get(url, headers=headers, params=params, timeout=10)
            if response.status_code == 200:
                return response.json()
        except:
            pass
        
        return []


def call_gemini_api(prompt, max_tokens=512):
    """G·ªçi Google Gemini API"""
    try:
        headers = {
            'Content-Type': 'application/json'
        }
        
        # Gemini API endpoint
        api_url = f"https://generativelanguage.googleapis.com/v1beta/models/{GEMINI_MODEL}:generateContent?key={GEMINI_API_KEY}"
        
        payload = {
            'contents': [{
                'parts': [{
                    'text': prompt
                }]
            }],
            'generationConfig': {
                'temperature': 0.7,
                'maxOutputTokens': max_tokens,
                'topP': 0.9,
            }
        }
        
        print(f"ü§ñ Calling Google Gemini API...")
        response = requests.post(api_url, headers=headers, json=payload, timeout=60)
        
        print(f"Status: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            if 'candidates' in result and len(result['candidates']) > 0:
                text = result['candidates'][0]['content']['parts'][0]['text']
                return text
            return None
        else:
            print(f"API Error: {response.text}")
            return None
    except Exception as e:
        print(f"Gemini API error: {e}")
        import traceback
        traceback.print_exc()
        return None


def build_rag_prompt(question, articles):
    """T·∫°o prompt RAG - Model t·ª± tr·∫£ l·ªùi d·ª±a tr√™n ki·∫øn th·ª©c c·ªßa n√≥"""
    
    # Lu√¥n cho model t·ª± tr·∫£ l·ªùi, c√≥ th·ªÉ tham kh·∫£o context n·∫øu c√≥
    if articles and len(articles) > 0:
        context = "\n\n".join([
            f"- {art.get('ten', 'N/A')}: {art.get('noi_dung', '')[:300]}..."
            for art in articles[:3]
        ])
        
        return f"""B·∫°n l√† tr·ª£ l√Ω t∆∞ v·∫•n ph√°p lu·∫≠t Vi·ªát Nam chuy√™n nghi·ªáp v·ªõi ki·∫øn th·ª©c s√¢u r·ªông v·ªÅ lu·∫≠t ph√°p Vi·ªát Nam.

D∆∞·ªõi ƒë√¢y l√† m·ªôt s·ªë ƒëi·ªÅu lu·∫≠t c√≥ th·ªÉ li√™n quan (ch·ªâ ƒë·ªÉ tham kh·∫£o):
{context}

C√¢u h·ªèi: {question}

H√£y tr·∫£ l·ªùi c√¢u h·ªèi d·ª±a tr√™n ki·∫øn th·ª©c ph√°p lu·∫≠t Vi·ªát Nam c·ªßa b·∫°n m·ªôt c√°ch ƒë·∫ßy ƒë·ªß, ch√≠nh x√°c v√† d·ªÖ hi·ªÉu. N·∫øu c√°c ƒëi·ªÅu lu·∫≠t tr√™n c√≥ th√¥ng tin h·ªØu √≠ch th√¨ tham kh·∫£o, nh∆∞ng ƒë·ª´ng gi·ªõi h·∫°n c√¢u tr·∫£ l·ªùi ch·ªâ trong ph·∫°m vi ƒë√≥. H√£y cung c·∫•p c√¢u tr·∫£ l·ªùi to√†n di·ªán nh·∫•t.

Tr·∫£ l·ªùi:"""
    else:
        # Kh√¥ng c√≥ context - model v·∫´n ph·∫£i tr·∫£ l·ªùi
        return f"""B·∫°n l√† tr·ª£ l√Ω t∆∞ v·∫•n ph√°p lu·∫≠t Vi·ªát Nam chuy√™n nghi·ªáp v·ªõi ki·∫øn th·ª©c s√¢u r·ªông v·ªÅ lu·∫≠t ph√°p Vi·ªát Nam.

C√¢u h·ªèi: {question}

H√£y tr·∫£ l·ªùi c√¢u h·ªèi d·ª±a tr√™n ki·∫øn th·ª©c ph√°p lu·∫≠t Vi·ªát Nam c·ªßa b·∫°n m·ªôt c√°ch ƒë·∫ßy ƒë·ªß, ch√≠nh x√°c v√† d·ªÖ hi·ªÉu. Cung c·∫•p th√¥ng tin chi ti·∫øt, c√°c quy ƒë·ªãnh li√™n quan v√† h∆∞·ªõng d·∫´n c·ª• th·ªÉ n·∫øu c√≥ th·ªÉ.

Tr·∫£ l·ªùi:"""


@app.route('/', methods=['GET'])
def index():
    """Service info"""
    return jsonify({
        'service': 'VN-Law-Mini RAG Service',
        'version': '2.0.0',
        'status': 'running',
        'mode': 'GOOGLE GEMINI - REAL AI',
        'model': MODEL_NAME,
        'endpoints': {
            'question': 'POST /api/v1/question',
            'health': 'GET /health'
        }
    })


@app.route('/health', methods=['GET'])
def health():
    """Health check"""
    return jsonify({
        'status': 'ok',
        'service': 'Real RAG Service',
        'model': MODEL_NAME,
        'provider': 'Google Gemini',
        'gemini_configured': bool(GEMINI_API_KEY),
        'supabase_configured': bool(SUPABASE_URL)
    })


@app.route('/api/v1/question', methods=['POST'])
def ask_question():
    """
    Q&A endpoint v·ªõi AI model th·∫≠t

    Body:
    {
        "question": "M·ª©c h·ªó tr·ª£ h·ªçc ngh·ªÅ l√† bao nhi√™u?"
    }

    Response:
    {
        "success": true,
        "answer": "...",
        "citations": [...],
        "model": "Arcee-VyLinh"
    }
    """
    try:
        data = request.get_json()
        
        if not data or 'question' not in data:
            return jsonify({
                'success': False,
                'error': 'Question is required'
            }), 400
        
        question = data['question'].strip()
        
        if not question:
            return jsonify({
                'success': False,
                'error': 'Question cannot be empty'
            }), 400
        
        print(f"\n{'='*60}")
        print(f"üìù Question: {question}")
        print(f"{'='*60}")
        
        # Step 1: T√¨m ki·∫øm vƒÉn b·∫£n li√™n quan
        print("üîç Searching documents...")
        articles = search_documents(question, limit=3)
        print(f"‚úÖ Found {len(articles)} articles")
        
        # Step 2: T·∫°o prompt RAG
        prompt = build_rag_prompt(question, articles)
        
        # Step 3: G·ªçi AI model
        if not GEMINI_API_KEY:
            return jsonify({
                'success': False,
                'error': 'Gemini API key ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh'
            }), 500
        
        answer = call_gemini_api(prompt)
        
        if not answer:
            return jsonify({
                'success': False,
                'error': 'Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi AI model. Vui l√≤ng th·ª≠ l·∫°i.'
            }), 500
        
        # Prepare citations
        citations = [
            {
                'mapc': art.get('mapc'),
                'ten': art.get('ten'),
                'noi_dung': art.get('noi_dung', '')[:200] + '...',
                'document_id': art.get('document_id')
            }
            for art in articles
        ]
        
        print(f"‚úÖ Answer generated successfully\n")
        
        return jsonify({
            'success': True,
            'question': question,
            'answer': answer,
            'citations': citations,
            'model': MODEL_NAME,
            'context_used': len(articles) > 0
        })
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500


# Error handlers
@app.errorhandler(404)
def not_found(e):
    return jsonify({'success': False, 'error': 'Route not found'}), 404


@app.errorhandler(500)
def internal_error(e):
    return jsonify({'success': False, 'error': 'Internal server error'}), 500


if __name__ == '__main__':
    port = int(os.getenv('PORT', 5001))
    print(f"\nüöÄ Starting RAG Service on port {port}...")
    print(f"üì° Access at: http://localhost:{port}\n")
    app.run(host='0.0.0.0', port=port, debug=False)
